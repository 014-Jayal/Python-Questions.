#Unoptimized

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if (n<=0) return False
        while n % 2 == 0:
            n//=2

        return n==1

----------------------------------------------------

#Optimized, but not enough fast

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if (n<=0):
            return False
        if n==1:
            return True
        if (n%2!=0):
            return False

        return self.isPowerOfTwo(n//2)

---------------------------------------------------

#Faster than loop and recursion bcoz of the use of Bitwise operator.

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if n == 0:
            return False
        return n & n-1 == 0
